services:
  api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - API_DEBUG=true
      - DATABASE_URL=postgresql://finsight:password@postgres:5432/finsight
      - REDIS_URL=redis://redis:6379/0
      - NEWSAPI_KEY=${NEWSAPI_KEY}
      - ALPHA_VANTAGE_KEY=${ALPHA_VANTAGE_KEY}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./data:/app/data
      - ./.env:/app/.env
    networks:
      - finsight-network

  postgres:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: finsight
      POSTGRES_USER: finsight  
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"  # Use 5433 to avoid conflicts with local PostgreSQL
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - finsight-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - finsight-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - finsight-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    networks:
      - finsight-network

  mlflow:
    image: python:3.11-slim
    ports:
      - "5001:5000"
    volumes:
      - ./mlruns:/mlruns
      - ./artifacts:/artifacts
    command: bash -c "pip install mlflow boto3 psycopg2-binary && mlflow ui --host 0.0.0.0 --port 5000 --backend-store-uri file:///mlruns --default-artifact-root file:///artifacts"
    networks:
      - finsight-network

networks:
  finsight-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
